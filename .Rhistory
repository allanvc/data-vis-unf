panel.background = element_rect(
fill = "#052833",
color = NA
),
legend.background = element_rect(
fill = "#052833",
color = NA
),
legend.position = c(.55, 0),
panel.grid.major = element_line(
color = "#052833",
size = 0
),
plot.title = element_text(
size = 22,
color = "green",
hjust = .5, vjust = 1
),
plot.caption = element_text(
size = 8,
color = "grey80",
hjust = .15, vjust = 0
),
legend.title = element_text(
size = 10,
color = "green"
),
legend.text = element_text(
size = 9,
color = "green"
),
plot.margin = unit(
c(
t = 1, r = -2,
b = .5, l = -2
), "lines"
)
)
p1
p1 <- ggplot() +
geom_sf(
data = world_shp,
fill = "#063140",
color = "#88C0D0",  # Azul suave
size = .2,
alpha = .35
) +
geom_sf(
data = wheat_lines_sf,
aes(
size = qty / 1000000,
alpha = qty / 1000000
),
fill = "#ff6103",
color = "#ff6103"
) +
geom_sf(
data = wheat_points_sf,
aes(
size = qty / 1000000
),
fill = "green",
color = "green",
alpha = .85,
stroke = .25
) +
scale_size(
name = "thousands of tonnes",
range = c(.5, 2)
) +
scale_alpha(
range = c(.25, .75)
) +
coord_sf(crs = crs_robinson) +
guides(
alpha = "none",
size = guide_legend(
override.aes = list(
fill = NULL,
alpha = .85,
color = "green"
),
direction = "horizontal",
keyheight = unit(1.5, "mm"),
keywidth = unit(15, "mm"),
title.position = "top",
title.hjust = .5,
label.hjust = .5,
label.position = "top",
nrow = 1,
byrow = T
)
) +
labs(
x = "",
y = "",
subtitle = "",
title = "Wheat imports from Ukraine in 2022",
caption = "United Nations. 2023. UN comtrade
http://comtrade.un.org"
) +
theme_void() +
theme(
plot.background = element_rect(
fill = "#052833",
color = NA
),
panel.background = element_rect(
fill = "#052833",
color = NA
),
legend.background = element_rect(
fill = "#052833",
color = NA
),
legend.position = c(.55, 0),
panel.grid.major = element_line(
color = "#052833",
size = 0
),
plot.title = element_text(
size = 22,
color = "green",
hjust = .5, vjust = 1
),
plot.caption = element_text(
size = 8,
color = "grey80",
hjust = .15, vjust = 0
),
legend.title = element_text(
size = 10,
color = "grey80"
),
legend.text = element_text(
size = 9,
color = "green"
),
plot.margin = unit(
c(
t = 1, r = -2,
b = .5, l = -2
), "lines"
)
)
p1
p1 <- ggplot() +
geom_sf(
data = world_shp,
fill = "#063140",
color = "#88C0D0",  # Azul suave
size = .2,
alpha = .35
) +
geom_sf(
data = wheat_lines_sf,
aes(
size = qty / 1000000,
alpha = qty / 1000000
),
fill = "#ff6103",
color = "#ff6103"
) +
geom_sf(
data = wheat_points_sf,
aes(
size = qty / 1000000
),
fill = "green",
color = "green",
alpha = .85,
stroke = .25
) +
scale_size(
name = "thousands of tonnes",
range = c(.5, 2)
) +
scale_alpha(
range = c(.25, .75)
) +
coord_sf(crs = crs_robinson) +
guides(
alpha = "none",
size = guide_legend(
override.aes = list(
fill = NULL,
alpha = .85,
color = "green"
),
direction = "horizontal",
keyheight = unit(1.5, "mm"),
keywidth = unit(15, "mm"),
title.position = "top",
title.hjust = .5,
label.hjust = .5,
label.position = "top",
nrow = 1,
byrow = T
)
) +
labs(
x = "",
y = "",
subtitle = "",
title = "Wheat imports from Ukraine in 2022",
caption = "United Nations. 2023. UN comtrade
http://comtrade.un.org"
) +
theme_void() +
theme(
plot.background = element_rect(
fill = "#052833",
color = NA
),
panel.background = element_rect(
fill = "#052833",
color = NA
),
legend.background = element_rect(
fill = "#052833",
color = NA
),
legend.position = c(.55, 0),
panel.grid.major = element_line(
color = "#052833",
size = 0
),
plot.title = element_text(
size = 22,
color = "grey80",
hjust = .5, vjust = 1
),
plot.caption = element_text(
size = 8,
color = "grey80",
hjust = .15, vjust = 0
),
legend.title = element_text(
size = 10,
color = "grey80"
),
legend.text = element_text(
size = 9,
color = "green"
),
plot.margin = unit(
c(
t = 1, r = -2,
b = .5, l = -2
), "lines"
)
)
p1
p1 <- ggplot() +
geom_sf(
data = world_shp,
fill = "#063140",
color = "#88C0D0",  # Azul suave
size = .2,
alpha = .35
) +
geom_sf(
data = wheat_lines_sf,
aes(
size = qty / 1000000,
alpha = qty / 1000000
),
fill = "#ff6103",
color = "green"
) +
geom_sf(
data = wheat_points_sf,
aes(
size = qty / 1000000
),
fill = "green",
color = "green",
alpha = .85,
stroke = .25
) +
scale_size(
name = "thousands of tonnes",
range = c(.5, 2)
) +
scale_alpha(
range = c(.25, .75)
) +
coord_sf(crs = crs_robinson) +
guides(
alpha = "none",
size = guide_legend(
override.aes = list(
fill = NULL,
alpha = .85,
color = "green"
),
direction = "horizontal",
keyheight = unit(1.5, "mm"),
keywidth = unit(15, "mm"),
title.position = "top",
title.hjust = .5,
label.hjust = .5,
label.position = "top",
nrow = 1,
byrow = T
)
) +
labs(
x = "",
y = "",
subtitle = "",
title = "Wheat imports from Ukraine in 2022",
caption = "United Nations. 2023. UN comtrade
http://comtrade.un.org"
) +
theme_void() +
theme(
plot.background = element_rect(
fill = "#052833",
color = NA
),
panel.background = element_rect(
fill = "#052833",
color = NA
),
legend.background = element_rect(
fill = "#052833",
color = NA
),
legend.position = c(.55, 0),
panel.grid.major = element_line(
color = "#052833",
size = 0
),
plot.title = element_text(
size = 22,
color = "grey80",
hjust = .5, vjust = 1
),
plot.caption = element_text(
size = 8,
color = "grey80",
hjust = .15, vjust = 0
),
legend.title = element_text(
size = 10,
color = "grey80"
),
legend.text = element_text(
size = 9,
color = "green"
),
plot.margin = unit(
c(
t = 1, r = -2,
b = .5, l = -2
), "lines"
)
)
p1
ggsave(
"ukraine-export_wheat-nolabel.png",
width = 10, h = 6, dpi = 600,
device = "png", bg = "#052833", p1
)
library(ITNr)
data("ELEnet16")
region_circle_plot(ELEnet16)
ggsave(
"ukraine-export_wheat-nolabel.png",
width = 8, h = 5, dpi = 600,
device = "png", bg = "#052833", p1
)
igraph::upgrade_graph(ELEnet16)
region_circle_plot(ELEnet16)
library(ITNr)
data("ELEnet16")
region_circle_plot(ELEnet16)
igraph::upgrade_graph(ELEnet16)
region_circle_plot(ELEnet16)
options(options(htmltools.preserve.raw = FALSE))
load("figuras_plotly_LS.RData")
load("figuras_plotly_LS.RData")
fig %>% layout(autosize = F, width = 200, height = 100,
legend = list(x=-0.1,y=5.15))
# Carregar pacotes necessários
library(quantmod)
library(dplyr)
library(tidyr)
load("figuras_plotly_LS.RData")
fig %>% layout(autosize = F, width = 200, height = 100,
legend = list(x=-0.1,y=5.15))
load("figuras_plotly_LS.RData")
fig %>% layout(width = 200, height = 100)
fig
# Instalação dos pacotes necessários
libs <- c("quantmod", "tidyverse", "gganimate", "viridis")
installed_libs <- libs %in% rownames(installed.packages())
if (any(installed_libs == FALSE)) {
install.packages(libs[!installed_libs], dependencies = TRUE)
}
invisible(lapply(libs, library, character.only = TRUE))
# 1. OBTENDO DADOS DAS AÇÕES IVV E SPY
tickers <- c("IVV", "SPY")
getSymbols(tickers, src = "yahoo", from = as.Date("2020-01-01"), to = Sys.Date())
# 2. PREPARANDO OS DADOS
data_ivv <- data.frame(Date = index(IVV), coredata(IVV))
data_spy <- data.frame(Date = index(SPY), coredata(SPY))
data_stocks <- bind_rows(
data_ivv %>%
select(Date, Adjusted) %>%
mutate(Ticker = "IVV"),
data_spy %>%
select(Date, Adjusted) %>%
mutate(Ticker = "SPY")
)
View(data_ivv)
View(data_ivv)
# Instalação dos pacotes necessários
libs <- c("quantmod", "tidyverse", "gganimate", "viridis")
installed_libs <- libs %in% rownames(installed.packages())
if (any(installed_libs == FALSE)) {
install.packages(libs[!installed_libs], dependencies = TRUE)
}
invisible(lapply(libs, library, character.only = TRUE))
# 1. OBTENDO DADOS DAS AÇÕES IVV E SPY
tickers <- c("IVV", "SPY")
getSymbols(tickers, src = "yahoo", from = as.Date("2020-01-01"), to = Sys.Date())
# 2. RENOMEANDO AS COLUNAS
colnames(IVV) <- gsub("IVV\\.", "", colnames(IVV))
colnames(SPY) <- gsub("SPY\\.", "", colnames(SPY))
# 3. PREPARANDO OS DADOS
data_ivv <- data.frame(Date = index(IVV), coredata(IVV))
data_spy <- data.frame(Date = index(SPY), coredata(SPY))
# Combinando os dados e ajustando as colunas
data_stocks <- bind_rows(
data_ivv %>%
select(Date, Adjusted) %>%
mutate(Ticker = "IVV"),
data_spy %>%
select(Date, Adjusted) %>%
mutate(Ticker = "SPY")
)
# 4. CRIANDO O PLOT COM GGANIMATE
p <- ggplot(data_stocks, aes(Date, Adjusted, group = Ticker, color = Ticker)) +
geom_line(size = 1) +
scale_color_viridis_d() +
labs(
x = "Date",
y = "Adjusted Price",
title = "Price Movement of IVV and SPY",
color = "Ticker"
) +
theme_minimal(base_size = 15) +
theme(legend.position = "top")
# 5. ADICIONANDO ANIMAÇÃO
p_anim <- p + transition_reveal(Date)
# 6. RENDERIZANDO A ANIMAÇÃO
animate(
p_anim,
nframes = 200,
fps = 20,
width = 800,
height = 600
)
# 1. OBTENDO DADOS DAS AÇÕES IVV E SPY
tickers <- c("KO", "PEP")
KO <- getSymbols(tickers[1], src = "yahoo", from = as.Date("2020-01-01"), to = Sys.Date(), auto.assign = FALSE)
# Instalação dos pacotes necessários
libs <- c("quantmod", "tidyverse", "plotly", "viridis")
installed_libs <- libs %in% rownames(installed.packages())
if (any(installed_libs == FALSE)) {
install.packages(libs[!installed_libs], dependencies = TRUE)
}
invisible(lapply(libs, library, character.only = TRUE))
# 1. OBTENDO DADOS DAS AÇÕES KO E PEP
tickers <- c("KO", "PEP")
KO <- getSymbols(tickers[1], src = "yahoo", from = as.Date("2020-01-01"), to = Sys.Date(), auto.assign = FALSE)
PEP <- getSymbols(tickers[2], src = "yahoo", from = as.Date("2020-01-01"), to = Sys.Date(), auto.assign = FALSE)
# 2. RENOMEANDO AS COLUNAS
colnames(KO) <- gsub("KO\\.", "", colnames(KO))
colnames(PEP) <- gsub("PEP\\.", "", colnames(PEP))
# 3. PREPARANDO OS DADOS
data_ko <- data.frame(Date = index(KO), coredata(KO))
data_pep <- data.frame(Date = index(PEP), coredata(PEP))
# Combinando os dados e ajustando as colunas
data_stocks <- bind_rows(
data_ko %>%
select(Date, Adjusted) %>%
mutate(Ticker = "KO"),
data_pep %>%
select(Date, Adjusted) %>%
mutate(Ticker = "PEP")
)
# 4. CRIANDO O PLOT COM PLOTLY
p <- plot_ly(data_stocks,
x = ~Date,
y = ~Adjusted,
color = ~Ticker,
colors = viridis::viridis(2),
type = 'scatter',
mode = 'lines',
frame = ~Date,
line = list(width = 2)) %>%
layout(
title = "Price Movement of KO and PEP",
xaxis = list(title = "Date"),
yaxis = list(title = "Adjusted Price"),
legend = list(title = list(text = "Ticker"), orientation = "h", x = 0.5, xanchor = "center")
)
# 5. MOSTRANDO A ANIMAÇÃO
p
