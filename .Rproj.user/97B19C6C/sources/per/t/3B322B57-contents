# Pacotes necessários
library(ggplot2)
library(plotly)
library(gt)
library(forecast)
library(dplyr)

# Dados simulados
set.seed(123)
data <- data.frame(
  Time = 1:10,
  Sales = cumsum(rnorm(10, mean = 10, sd = 5))
)

# Convertendo os dados para uma série temporal
sales_ts <- ts(data$Sales, frequency = 1)  # Frequência de 1 para dados não sazonais

# Ajustando o modelo ARIMA
arima_model <- auto.arima(sales_ts)

# Forecast de 1 e 2 passos à frente com intervalos de confiança
forecast_arima <- forecast(arima_model, h = 2, level = c(80, 95))

# Convertendo a previsão para data frame
forecast_data <- data.frame(
  Time = 11:12,
  Sales = forecast_arima$mean,
  L95 = forecast_arima$lower[, 2],
  L80 = forecast_arima$lower[, 1],
  U80 = forecast_arima$upper[, 1],
  U95 = forecast_arima$upper[, 2]
)

# Adicionando colunas de intervalo de confiança aos dados originais
data$L95 <- NA
data$L80 <- NA
data$U80 <- NA
data$U95 <- NA

# Combinando os dados originais e de forecast
data_forecast <- rbind(data, forecast_data)

# Criando um dataframe separado para a linha de conexão
connection_line <- data.frame(
  Time = c(10, 11),
  Sales = c(tail(data$Sales, 1), forecast_data$Sales[1])
)

# Criando o gráfico com intervalos de confiança e conexão entre o último observado e o primeiro previsto
plot <- ggplot(data_forecast, aes(x = Time, y = Sales)) +
  geom_line(data = data, color = "blue") +
  geom_point(data = data, color = "blue") +
  geom_line(data = forecast_data, color = "red") +
  geom_point(data = forecast_data, color = "red") +
  geom_line(data = connection_line, aes(x = Time, y = Sales), color = "red", linetype = "dashed") +  # Linha conectando último ponto observado ao primeiro previsto
  geom_ribbon(data = forecast_data, aes(ymin = Lower_80, ymax = Upper_80), fill = "lightblue", alpha = 0.5) +
  geom_ribbon(data = forecast_data, aes(ymin = Lower_95, ymax = Upper_95), fill = "lightgray", alpha = 0.3) +
  labs(title = "ARIMA Sales Forecast",
       x = "Time",
       y = "Sales") +
  theme_minimal()

# Tornando o gráfico interativo com ggplotly
interactive_plot <- ggplotly(plot)

# Exibindo o gráfico interativo
interactive_plot

# ------------

# Invertendo a ordem das linhas
data_forecast <- data_forecast %>%
  arrange(desc(Time))

# Substituindo NAs por traços
data_forecast[is.na(data_forecast)] <- "-"

# Criando a tabela com gt e destacando as previsões
table <- gt(data_forecast) %>%
  tab_header(
    title = "Data and Forecast Table"
  ) %>%
  data_color(
    columns = everything(),
    rows = 1:2,  # Destaca as duas primeiras linhas (previsões)
    fn = scales::col_factor(
      palette = c("lightyellow"),
      domain = NULL
    )
  ) %>%
  tab_options(
    table.font.size = "small"  # Reduz o tamanho da fonte
  )

# Exibindo a tabela
table
